import {MessageProducer} from "../message/MessageProducer.ts";
import {MessageHandler} from "../message/MessageHandler.ts";
import {ICode} from "../intermediate/ICode.ts";
import { Message } from "../message/Message.ts";
import { MessageListener } from "../message/MessageListener.ts";
import {SymTabStack} from "../intermediate/SymTabStack.ts";


/**
 * <h2>Backend</h2>
 * <p>The framework class that represents the back end component</p>
 */
export abstract class Backend implements MessageProducer {


    protected messageHandler: MessageHandler = new MessageHandler();                // Message handler delegate.
    protected symTabStack: SymTabStack | undefined;                                 // Symbol table stack.
    protected iCode: ICode | undefined;                                             // Intermediate code.

    /**
     * Process the intermediate code and the symbol table generated by the
     * parser. To be implemented by a compiler or an interpreter subclass.
     * @param iCode the intermediate code.
     * @param symTab the symbol table.
     * @throws {Error} if an error occurred.
     */
    public abstract process(iCode: ICode, symTabStack: SymTabStack): void;

    /**
     * @getter
     * @return the Intermediate code.
     */
    public getICode(): ICode | undefined{
        return this.iCode;
    }

    /**
     * @getter
     * @return the symbol table.
     */
    public getSymTab(): SymTabStack | undefined {
        return this.symTabStack;
    }

    /**
     * @getter
     * @return the Message handler.
     */
    public getMessageHandler(): MessageHandler {
        return this.messageHandler;
    }

    /**
     * Add a Backend message listener.
     * @param listener the listener to add.
     */
    addMessageListener(listener: MessageListener): void {
        return this.messageHandler.addListener(listener);
    }

    /**
     * Remove a Backend message listener.
     * @param listener the listener to remove.
     */
    removeMessageListener(listener: MessageListener): void {
        return this.messageHandler.removeListener(listener);
    }

    /**
     * Notify all Backend Message listeners after setting the message.
     * @param message
     */
    sendMessage(message: Message): void {
        return this.messageHandler.sendMessage(message);
    }
}