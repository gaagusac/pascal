import {ICode} from "../../intermediate/ICode.ts";
import {Backend} from "../Backend.ts";
import {Message} from "../../message/Message.ts";
import {MessageType} from "../../message/MessageType.ts";
import {SymTabStack} from "../../intermediate/SymTabStack.ts";


export class CodeGenerator extends Backend {

    /**
     * Process the intermediate code and the symbol table generated by the
     * parser to generate machine-language instructions.
     * @param iCode the intermediate code.
     * @param symTabStack  the symbol table.
     * @throws {Error} if an error occurred.
     */
    public process(iCode: ICode, symTabStack: SymTabStack): void {

        let starTime = Date.now();
        let endTime = Date.now();
        let elapsedTime = (endTime - starTime)/1000;
        let instructionCount = 0;

        // Send the compiler summary message.
        this.sendMessage(new Message(MessageType.COMPILER_SUMMARY, {
            instruction_count: instructionCount,
            elapsed_time: elapsedTime,
        }));
    }

}