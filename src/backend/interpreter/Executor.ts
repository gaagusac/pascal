import {ICode} from "../../intermediate/ICode.ts";
import {Backend} from "../Backend.ts";
import {Message} from "../../message/Message.ts";
import {MessageType} from "../../message/MessageType.ts";
import {SymTabStack} from "../../intermediate/SymTabStack.ts";

export class Executor extends Backend {

    /**
     * Process the intermediate code and the symbol table generated by
     * the parser to execute the source program.
     * @param iCode
     * @param symTab
     */
    public process(iCode: ICode, symTabStack: SymTabStack): void {
        const startTime = Date.now();
        const endTime = Date.now();
        let elapsedTime = (endTime - startTime)/1000;
        let executionCount = 0;
        let runtimeErrors = 0;

        // Send the interpreter summary message.
        this.sendMessage(new Message(MessageType.INTERPRETER_SUMMARY, {
            execution_count: executionCount,
            runtime_errors: runtimeErrors,
            elapsed_time: elapsedTime,
        }));
    }

}